// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/BenjaminCallahan/my-bank-service/internal/domain"
	"github.com/BenjaminCallahan/my-bank-service/internal/repository"
	"github.com/shopspring/decimal"
	"sync"
)

// Ensure, that AccountMock does implement repository.Account.
// If this is not the case, regenerate this file with moq.
var _ repository.Account = &AccountMock{}

// AccountMock is a mock implementation of repository.Account.
//
// 	func TestSomethingThatUsesAccount(t *testing.T) {
//
// 		// make and configure a mocked repository.Account
// 		mockedAccount := &AccountMock{
// 			CreateTransferFunc: func(f float64) error {
// 				panic("mock out the CreateTransfer method")
// 			},
// 			GetAccountCurrencyRateFunc: func(s string) (domain.AccExchangeRate, error) {
// 				panic("mock out the GetAccountCurrencyRate method")
// 			},
// 			GetUserAccountFunc: func() (domain.BankAccount, error) {
// 				panic("mock out the GetUserAccount method")
// 			},
// 			ProcessedTransferWithFnFunc: func(fn func(decimal.Decimal, []domain.Transfer) decimal.Decimal) error {
// 				panic("mock out the ProcessedTransferWithFn method")
// 			},
// 			UpdateWithFnFunc: func(decimalMoqParam decimal.Decimal, fn func(amountInBankAccount decimal.Decimal) (bool, error)) error {
// 				panic("mock out the UpdateWithFn method")
// 			},
// 		}
//
// 		// use mockedAccount in code that requires repository.Account
// 		// and then make assertions.
//
// 	}
type AccountMock struct {
	// CreateTransferFunc mocks the CreateTransfer method.
	CreateTransferFunc func(f float64) error

	// GetAccountCurrencyRateFunc mocks the GetAccountCurrencyRate method.
	GetAccountCurrencyRateFunc func(s string) (domain.AccExchangeRate, error)

	// GetUserAccountFunc mocks the GetUserAccount method.
	GetUserAccountFunc func() (domain.BankAccount, error)

	// ProcessedTransferWithFnFunc mocks the ProcessedTransferWithFn method.
	ProcessedTransferWithFnFunc func(fn func(decimal.Decimal, []domain.Transfer) decimal.Decimal) error

	// UpdateWithFnFunc mocks the UpdateWithFn method.
	UpdateWithFnFunc func(decimalMoqParam decimal.Decimal, fn func(amountInBankAccount decimal.Decimal) (bool, error)) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateTransfer holds details about calls to the CreateTransfer method.
		CreateTransfer []struct {
			// F is the f argument value.
			F float64
		}
		// GetAccountCurrencyRate holds details about calls to the GetAccountCurrencyRate method.
		GetAccountCurrencyRate []struct {
			// S is the s argument value.
			S string
		}
		// GetUserAccount holds details about calls to the GetUserAccount method.
		GetUserAccount []struct {
		}
		// ProcessedTransferWithFn holds details about calls to the ProcessedTransferWithFn method.
		ProcessedTransferWithFn []struct {
			// Fn is the fn argument value.
			Fn func(decimal.Decimal, []domain.Transfer) decimal.Decimal
		}
		// UpdateWithFn holds details about calls to the UpdateWithFn method.
		UpdateWithFn []struct {
			// DecimalMoqParam is the decimalMoqParam argument value.
			DecimalMoqParam decimal.Decimal
			// Fn is the fn argument value.
			Fn func(amountInBankAccount decimal.Decimal) (bool, error)
		}
	}
	lockCreateTransfer          sync.RWMutex
	lockGetAccountCurrencyRate  sync.RWMutex
	lockGetUserAccount          sync.RWMutex
	lockProcessedTransferWithFn sync.RWMutex
	lockUpdateWithFn            sync.RWMutex
}

// CreateTransfer calls CreateTransferFunc.
func (mock *AccountMock) CreateTransfer(f float64) error {
	callInfo := struct {
		F float64
	}{
		F: f,
	}
	mock.lockCreateTransfer.Lock()
	mock.calls.CreateTransfer = append(mock.calls.CreateTransfer, callInfo)
	mock.lockCreateTransfer.Unlock()
	if mock.CreateTransferFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateTransferFunc(f)
}

// CreateTransferCalls gets all the calls that were made to CreateTransfer.
// Check the length with:
//     len(mockedAccount.CreateTransferCalls())
func (mock *AccountMock) CreateTransferCalls() []struct {
	F float64
} {
	var calls []struct {
		F float64
	}
	mock.lockCreateTransfer.RLock()
	calls = mock.calls.CreateTransfer
	mock.lockCreateTransfer.RUnlock()
	return calls
}

// GetAccountCurrencyRate calls GetAccountCurrencyRateFunc.
func (mock *AccountMock) GetAccountCurrencyRate(s string) (domain.AccExchangeRate, error) {
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGetAccountCurrencyRate.Lock()
	mock.calls.GetAccountCurrencyRate = append(mock.calls.GetAccountCurrencyRate, callInfo)
	mock.lockGetAccountCurrencyRate.Unlock()
	if mock.GetAccountCurrencyRateFunc == nil {
		var (
			accExchangeRateOut domain.AccExchangeRate
			errOut             error
		)
		return accExchangeRateOut, errOut
	}
	return mock.GetAccountCurrencyRateFunc(s)
}

// GetAccountCurrencyRateCalls gets all the calls that were made to GetAccountCurrencyRate.
// Check the length with:
//     len(mockedAccount.GetAccountCurrencyRateCalls())
func (mock *AccountMock) GetAccountCurrencyRateCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGetAccountCurrencyRate.RLock()
	calls = mock.calls.GetAccountCurrencyRate
	mock.lockGetAccountCurrencyRate.RUnlock()
	return calls
}

// GetUserAccount calls GetUserAccountFunc.
func (mock *AccountMock) GetUserAccount() (domain.BankAccount, error) {
	callInfo := struct {
	}{}
	mock.lockGetUserAccount.Lock()
	mock.calls.GetUserAccount = append(mock.calls.GetUserAccount, callInfo)
	mock.lockGetUserAccount.Unlock()
	if mock.GetUserAccountFunc == nil {
		var (
			bankAccountOut domain.BankAccount
			errOut         error
		)
		return bankAccountOut, errOut
	}
	return mock.GetUserAccountFunc()
}

// GetUserAccountCalls gets all the calls that were made to GetUserAccount.
// Check the length with:
//     len(mockedAccount.GetUserAccountCalls())
func (mock *AccountMock) GetUserAccountCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUserAccount.RLock()
	calls = mock.calls.GetUserAccount
	mock.lockGetUserAccount.RUnlock()
	return calls
}

// ProcessedTransferWithFn calls ProcessedTransferWithFnFunc.
func (mock *AccountMock) ProcessedTransferWithFn(fn func(decimal.Decimal, []domain.Transfer) decimal.Decimal) error {
	callInfo := struct {
		Fn func(decimal.Decimal, []domain.Transfer) decimal.Decimal
	}{
		Fn: fn,
	}
	mock.lockProcessedTransferWithFn.Lock()
	mock.calls.ProcessedTransferWithFn = append(mock.calls.ProcessedTransferWithFn, callInfo)
	mock.lockProcessedTransferWithFn.Unlock()
	if mock.ProcessedTransferWithFnFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.ProcessedTransferWithFnFunc(fn)
}

// ProcessedTransferWithFnCalls gets all the calls that were made to ProcessedTransferWithFn.
// Check the length with:
//     len(mockedAccount.ProcessedTransferWithFnCalls())
func (mock *AccountMock) ProcessedTransferWithFnCalls() []struct {
	Fn func(decimal.Decimal, []domain.Transfer) decimal.Decimal
} {
	var calls []struct {
		Fn func(decimal.Decimal, []domain.Transfer) decimal.Decimal
	}
	mock.lockProcessedTransferWithFn.RLock()
	calls = mock.calls.ProcessedTransferWithFn
	mock.lockProcessedTransferWithFn.RUnlock()
	return calls
}

// UpdateWithFn calls UpdateWithFnFunc.
func (mock *AccountMock) UpdateWithFn(decimalMoqParam decimal.Decimal, fn func(amountInBankAccount decimal.Decimal) (bool, error)) error {
	callInfo := struct {
		DecimalMoqParam decimal.Decimal
		Fn              func(amountInBankAccount decimal.Decimal) (bool, error)
	}{
		DecimalMoqParam: decimalMoqParam,
		Fn:              fn,
	}
	mock.lockUpdateWithFn.Lock()
	mock.calls.UpdateWithFn = append(mock.calls.UpdateWithFn, callInfo)
	mock.lockUpdateWithFn.Unlock()
	if mock.UpdateWithFnFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateWithFnFunc(decimalMoqParam, fn)
}

// UpdateWithFnCalls gets all the calls that were made to UpdateWithFn.
// Check the length with:
//     len(mockedAccount.UpdateWithFnCalls())
func (mock *AccountMock) UpdateWithFnCalls() []struct {
	DecimalMoqParam decimal.Decimal
	Fn              func(amountInBankAccount decimal.Decimal) (bool, error)
} {
	var calls []struct {
		DecimalMoqParam decimal.Decimal
		Fn              func(amountInBankAccount decimal.Decimal) (bool, error)
	}
	mock.lockUpdateWithFn.RLock()
	calls = mock.calls.UpdateWithFn
	mock.lockUpdateWithFn.RUnlock()
	return calls
}
