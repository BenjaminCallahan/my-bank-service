// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"sync"
)

// Ensure, that BankAccountMock does implement BankAccount.
// If this is not the case, regenerate this file with moq.
var _ BankAccount = &BankAccountMock{}

// BankAccountMock is a mock implementation of BankAccount.
//
// 	func TestSomethingThatUsesBankAccount(t *testing.T) {
//
// 		// make and configure a mocked BankAccount
// 		mockedBankAccount := &BankAccountMock{
// 			AddFundsFunc: func(sum float64) error {
// 				panic("mock out the AddFunds method")
// 			},
// 			GetAccountCurrencyRateFunc: func(cur string) (float64, error) {
// 				panic("mock out the GetAccountCurrencyRate method")
// 			},
// 			GetBalanceFunc: func(cur string) (float64, error) {
// 				panic("mock out the GetBalance method")
// 			},
// 			GetCurrencyFunc: func() (string, error) {
// 				panic("mock out the GetCurrency method")
// 			},
// 			WithdrawFunc: func(sum float64) error {
// 				panic("mock out the Withdraw method")
// 			},
// 			sumProfitFunc: func() error {
// 				panic("mock out the sumProfit method")
// 			},
// 		}
//
// 		// use mockedBankAccount in code that requires BankAccount
// 		// and then make assertions.
//
// 	}
type BankAccountMock struct {
	// AddFundsFunc mocks the AddFunds method.
	AddFundsFunc func(sum float64) error

	// GetAccountCurrencyRateFunc mocks the GetAccountCurrencyRate method.
	GetAccountCurrencyRateFunc func(cur string) (float64, error)

	// GetBalanceFunc mocks the GetBalance method.
	GetBalanceFunc func(cur string) (float64, error)

	// GetCurrencyFunc mocks the GetCurrency method.
	GetCurrencyFunc func() (string, error)

	// WithdrawFunc mocks the Withdraw method.
	WithdrawFunc func(sum float64) error

	// sumProfitFunc mocks the sumProfit method.
	sumProfitFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// AddFunds holds details about calls to the AddFunds method.
		AddFunds []struct {
			// Sum is the sum argument value.
			Sum float64
		}
		// GetAccountCurrencyRate holds details about calls to the GetAccountCurrencyRate method.
		GetAccountCurrencyRate []struct {
			// Cur is the cur argument value.
			Cur string
		}
		// GetBalance holds details about calls to the GetBalance method.
		GetBalance []struct {
			// Cur is the cur argument value.
			Cur string
		}
		// GetCurrency holds details about calls to the GetCurrency method.
		GetCurrency []struct {
		}
		// Withdraw holds details about calls to the Withdraw method.
		Withdraw []struct {
			// Sum is the sum argument value.
			Sum float64
		}
		// sumProfit holds details about calls to the sumProfit method.
		sumProfit []struct {
		}
	}
	lockAddFunds               sync.RWMutex
	lockGetAccountCurrencyRate sync.RWMutex
	lockGetBalance             sync.RWMutex
	lockGetCurrency            sync.RWMutex
	lockWithdraw               sync.RWMutex
	locksumProfit              sync.RWMutex
}

// AddFunds calls AddFundsFunc.
func (mock *BankAccountMock) AddFunds(sum float64) error {
	callInfo := struct {
		Sum float64
	}{
		Sum: sum,
	}
	mock.lockAddFunds.Lock()
	mock.calls.AddFunds = append(mock.calls.AddFunds, callInfo)
	mock.lockAddFunds.Unlock()
	if mock.AddFundsFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.AddFundsFunc(sum)
}

// AddFundsCalls gets all the calls that were made to AddFunds.
// Check the length with:
//     len(mockedBankAccount.AddFundsCalls())
func (mock *BankAccountMock) AddFundsCalls() []struct {
	Sum float64
} {
	var calls []struct {
		Sum float64
	}
	mock.lockAddFunds.RLock()
	calls = mock.calls.AddFunds
	mock.lockAddFunds.RUnlock()
	return calls
}

// GetAccountCurrencyRate calls GetAccountCurrencyRateFunc.
func (mock *BankAccountMock) GetAccountCurrencyRate(cur string) (float64, error) {
	callInfo := struct {
		Cur string
	}{
		Cur: cur,
	}
	mock.lockGetAccountCurrencyRate.Lock()
	mock.calls.GetAccountCurrencyRate = append(mock.calls.GetAccountCurrencyRate, callInfo)
	mock.lockGetAccountCurrencyRate.Unlock()
	if mock.GetAccountCurrencyRateFunc == nil {
		var (
			fOut   float64
			errOut error
		)
		return fOut, errOut
	}
	return mock.GetAccountCurrencyRateFunc(cur)
}

// GetAccountCurrencyRateCalls gets all the calls that were made to GetAccountCurrencyRate.
// Check the length with:
//     len(mockedBankAccount.GetAccountCurrencyRateCalls())
func (mock *BankAccountMock) GetAccountCurrencyRateCalls() []struct {
	Cur string
} {
	var calls []struct {
		Cur string
	}
	mock.lockGetAccountCurrencyRate.RLock()
	calls = mock.calls.GetAccountCurrencyRate
	mock.lockGetAccountCurrencyRate.RUnlock()
	return calls
}

// GetBalance calls GetBalanceFunc.
func (mock *BankAccountMock) GetBalance(cur string) (float64, error) {
	callInfo := struct {
		Cur string
	}{
		Cur: cur,
	}
	mock.lockGetBalance.Lock()
	mock.calls.GetBalance = append(mock.calls.GetBalance, callInfo)
	mock.lockGetBalance.Unlock()
	if mock.GetBalanceFunc == nil {
		var (
			fOut   float64
			errOut error
		)
		return fOut, errOut
	}
	return mock.GetBalanceFunc(cur)
}

// GetBalanceCalls gets all the calls that were made to GetBalance.
// Check the length with:
//     len(mockedBankAccount.GetBalanceCalls())
func (mock *BankAccountMock) GetBalanceCalls() []struct {
	Cur string
} {
	var calls []struct {
		Cur string
	}
	mock.lockGetBalance.RLock()
	calls = mock.calls.GetBalance
	mock.lockGetBalance.RUnlock()
	return calls
}

// GetCurrency calls GetCurrencyFunc.
func (mock *BankAccountMock) GetCurrency() (string, error) {
	callInfo := struct {
	}{}
	mock.lockGetCurrency.Lock()
	mock.calls.GetCurrency = append(mock.calls.GetCurrency, callInfo)
	mock.lockGetCurrency.Unlock()
	if mock.GetCurrencyFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.GetCurrencyFunc()
}

// GetCurrencyCalls gets all the calls that were made to GetCurrency.
// Check the length with:
//     len(mockedBankAccount.GetCurrencyCalls())
func (mock *BankAccountMock) GetCurrencyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetCurrency.RLock()
	calls = mock.calls.GetCurrency
	mock.lockGetCurrency.RUnlock()
	return calls
}

// Withdraw calls WithdrawFunc.
func (mock *BankAccountMock) Withdraw(sum float64) error {
	callInfo := struct {
		Sum float64
	}{
		Sum: sum,
	}
	mock.lockWithdraw.Lock()
	mock.calls.Withdraw = append(mock.calls.Withdraw, callInfo)
	mock.lockWithdraw.Unlock()
	if mock.WithdrawFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.WithdrawFunc(sum)
}

// WithdrawCalls gets all the calls that were made to Withdraw.
// Check the length with:
//     len(mockedBankAccount.WithdrawCalls())
func (mock *BankAccountMock) WithdrawCalls() []struct {
	Sum float64
} {
	var calls []struct {
		Sum float64
	}
	mock.lockWithdraw.RLock()
	calls = mock.calls.Withdraw
	mock.lockWithdraw.RUnlock()
	return calls
}

// sumProfit calls sumProfitFunc.
func (mock *BankAccountMock) sumProfit() error {
	callInfo := struct {
	}{}
	mock.locksumProfit.Lock()
	mock.calls.sumProfit = append(mock.calls.sumProfit, callInfo)
	mock.locksumProfit.Unlock()
	if mock.sumProfitFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.sumProfitFunc()
}

// sumProfitCalls gets all the calls that were made to sumProfit.
// Check the length with:
//     len(mockedBankAccount.sumProfitCalls())
func (mock *BankAccountMock) sumProfitCalls() []struct {
} {
	var calls []struct {
	}
	mock.locksumProfit.RLock()
	calls = mock.calls.sumProfit
	mock.locksumProfit.RUnlock()
	return calls
}
